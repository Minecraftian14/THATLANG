plugins {
    id 'java'
}

group 'in.mcxiv'
version '0.1'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

test {
    useJUnitPlatform()
}


configurations {
    provided
    implementation.extendsFrom(provided)
}

dependencies {
    provided 'in.mcxiv:MyLOGGER:5.6'
    provided 'in.mcxiv:TryCatchSuite:0'

    provided 'com.formdev:flatlaf:2.0.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

task sourcesJar(type: Jar, dependsOn: classes) {

    // Add in the project name.
    def projectName = "THATLANG"
    // Add in the name of the class with the main method. Set null if no main class.
    def mainClassName = "thatlang.THATRuntime"
    // Classifying it as sources for jitpack. Other values: [sources/javadoc]
    def classifier = ""
    // Name of the jar file. Add `System.currentTimeMillis()` to append current millis.
    def jarName = projectName
    // Assets folders
    def assetsDir = []
    // Additional sources folders.
    def extraSourcesDirs = []
    // Change if you want to place the jar file to another position.
    def buildDestination = "build/libs"
    // Add string values to copy the built jar file at different locations (relative)
    def copyDirs = []

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////// CORE CODE, SUPPOSED TO BE HIDDEN, UNLESS DEBUGGING
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //<editor-fold defaultstate="collapsed" desc="CORE CODE, SUPPOSED TO BE HIDDEN, UNLESS DEBUGGING">

    // Note that jar file name will have version and classifier appended by default
    // Note that "/build/classes/java/main" is appended automatically to extraSourcesDirs

    archiveClassifier.set(classifier)

    for (i in 0..<extraSourcesDirs.size())
        extraSourcesDirs[i] += "/build/classes/java/main"

    from files(assetsDir)
    from files(extraSourcesDirs)

    // Add the files manually
    // from files(sourceSets.main.output.classesDirs)
    // from files(sourceSets.main.output.resourcesDir)
    // Or let a simple command add everything.
    from configurations.provided.asFileTree.files.collect { zipTree(it) }

    manifest {
        if (mainClassName == null) {
            attributes 'Implementation-Title': projectName,
                    'Implementation-Version': project.version
        } else {
            attributes 'Implementation-Title': projectName,
                    'Implementation-Version': project.version,
                    'Main-Class': "$project.group.$mainClassName"
        }
    }

    setArchivesBaseName(jarName)

    destinationDirectory = file(buildDestination)

    doLast {
        def jarToCopy = archiveFileName.get()

        for (path in copyDirs) {
            copy {
                from "/$buildDestination/$jarToCopy"
                into "/$path"
            }
        }
    }

    with jar

    //</editor-fold>

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

// Declaring artifacts for jitpack to recognise
artifacts {
    archives sourcesJar
}
